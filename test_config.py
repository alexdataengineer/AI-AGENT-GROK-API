#!/usr/bin/env python3
"""
Script de teste para verificar a configura√ß√£o segura da API
"""

import os
from dotenv import load_dotenv

def test_configuration():
    """Testa se a configura√ß√£o est√° segura e funcionando"""
    
    print("üîí Testando Configura√ß√£o Segura da API")
    print("=" * 50)
    
    # Teste 1: Verificar se .env existe
    if os.path.exists('.env'):
        print("‚úÖ Arquivo .env encontrado")
    else:
        print("‚ùå Arquivo .env n√£o encontrado")
        print("   Execute: cp .env.example .env")
        return False
    
    # Teste 2: Verificar se .env est√° no .gitignore
    if os.path.exists('.gitignore'):
        with open('.gitignore', 'r') as f:
            gitignore_content = f.read()
            if '.env' in gitignore_content:
                print("‚úÖ .env est√° no .gitignore")
            else:
                print("‚ùå .env n√£o est√° no .gitignore")
                return False
    else:
        print("‚ùå .gitignore n√£o encontrado")
        return False
    
    # Teste 3: Verificar se .env.example existe
    if os.path.exists('.env.example'):
        print("‚úÖ .env.example encontrado")
    else:
        print("‚ùå .env.example n√£o encontrado")
        return False
    
    # Teste 4: Testar carregamento da configura√ß√£o
    try:
        load_dotenv()
        api_key = os.getenv('XAI_API_KEY')
        
        if api_key and api_key != 'your_xai_api_key_here':
            print("‚úÖ API key configurada corretamente")
            print(f"   Key: {api_key[:10]}...{api_key[-10:]}")
        else:
            print("‚ùå API key n√£o configurada ou est√° no valor padr√£o")
            print("   Edite o arquivo .env com sua API key real")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao carregar configura√ß√£o: {e}")
        return False
    
    # Teste 5: Verificar se n√£o h√° API keys hardcoded
    try:
        with open('config.py', 'r') as f:
            config_content = f.read()
            if 'xai-' in config_content and 'ALAspSpCmyKga42PSR4xQNmHjuj68ux2lDHUC8RS9SBPTNrTBe4ZSAZDE42PhI96tJqq7hjRstilmGWp' in config_content:
                print("‚ùå API key ainda est√° hardcoded no config.py")
                return False
            else:
                print("‚úÖ API key removida do c√≥digo fonte")
    except Exception as e:
        print(f"‚ùå Erro ao verificar config.py: {e}")
        return False
    
    print("\nüéâ Todos os testes passaram!")
    print("‚úÖ Sua configura√ß√£o est√° segura para subir no GitHub")
    return True

def test_api_connection():
    """Testa a conex√£o com a API"""
    
    print("\nüîó Testando Conex√£o com a API")
    print("=" * 50)
    
    try:
        from grok_api import GrokAPI
        
        api = GrokAPI()
        response = api.chat_completion([
            {"role": "user", "content": "Teste de conex√£o"}
        ])
        
        if "error" not in response:
            print("‚úÖ Conex√£o com Grok API estabelecida")
            return True
        else:
            print(f"‚ùå Erro na API: {response['error']}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao testar API: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Teste de Configura√ß√£o Segura")
    print("=" * 50)
    
    config_ok = test_configuration()
    
    if config_ok:
        api_ok = test_api_connection()
        
        if api_ok:
            print("\nüéâ Sistema pronto para uso!")
            print("‚úÖ Configura√ß√£o segura")
            print("‚úÖ API funcionando")
            print("‚úÖ Pronto para subir no GitHub")
        else:
            print("\n‚ö†Ô∏è Configura√ß√£o segura, mas API com problemas")
            print("   Verifique sua conex√£o com a internet")
    else:
        print("\n‚ùå Problemas na configura√ß√£o encontrados")
        print("   Siga as instru√ß√µes acima para corrigir") 