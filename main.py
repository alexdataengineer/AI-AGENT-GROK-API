#!/usr/bin/env python3
"""
Agente de An√°lise de Dados com Grok API
========================================

Este agente possui:
‚úÖ Mem√≥ria persistente
‚úÖ Loop de decis√£o inteligente
‚úÖ Intera√ß√£o com m√∫ltiplas fontes (DuckDB + Grok API)
‚úÖ Sistema human-in-the-loop
"""

import sys
import os
from data_analysis_agent import DataAnalysisAgent

def main():
    """
    Fun√ß√£o principal para executar o agente
    """
    print("üöÄ Iniciando Agente de An√°lise de Dados...")
    
    try:
        # Inicializar o agente
        agent = DataAnalysisAgent()
        
        # Mostrar vis√£o geral dos dados
        data_overview = agent.get_data_overview()
        print(f"\nüìä Vis√£o Geral dos Dados:")
        print(f"   ‚Ä¢ Total de registros: {data_overview['total_records']}")
        print(f"   ‚Ä¢ Cidades √∫nicas: {data_overview['total_cities']}")
        print(f"   ‚Ä¢ Estados: {data_overview['total_states']}")
        print(f"   ‚Ä¢ Regi√µes: {data_overview['total_regions']}")
        print(f"   ‚Ä¢ Popula√ß√£o m√©dia: {data_overview['avg_population']:,.0f}")
        print(f"   ‚Ä¢ PIB per capita m√©dio: R$ {data_overview['avg_gdp_per_capita']:,.2f}")
        
        print(f"\nüí° Exemplos de perguntas que voc√™ pode fazer:")
        print(f"   ‚Ä¢ 'Quais s√£o as 10 cidades com maior PIB?'")
        print(f"   ‚Ä¢ 'Analise a correla√ß√£o entre popula√ß√£o e PIB'")
        print(f"   ‚Ä¢ 'Compare as regi√µes do Brasil'")
        print(f"   ‚Ä¢ 'Busque informa√ß√µes sobre S√£o Paulo'")
        print(f"   ‚Ä¢ 'Gere insights sobre oportunidades de neg√≥cio'")
        print(f"   ‚Ä¢ 'Lembre-se da √∫ltima an√°lise que fizemos'")
        
        print(f"\nüîß Comandos especiais:")
        print(f"   ‚Ä¢ 'memoria' - Ver resumo da mem√≥ria")
        print(f"   ‚Ä¢ 'limpar' - Limpar mem√≥ria")
        print(f"   ‚Ä¢ 'exportar' - Exportar mem√≥ria")
        print(f"   ‚Ä¢ 'sair' - Encerrar programa")
        
        # Loop principal de intera√ß√£o
        while True:
            try:
                user_input = input(f"\nü§ñ Digite sua pergunta: ").strip()
                
                if not user_input:
                    continue
                
                # Comandos especiais
                if user_input.lower() == 'sair':
                    print("üëã Encerrando agente...")
                    break
                
                elif user_input.lower() == 'memoria':
                    memory_summary = agent.get_memory_summary()
                    print(f"\nüß† Resumo da Mem√≥ria:")
                    print(f"   ‚Ä¢ Total de intera√ß√µes: {memory_summary.get('total_interactions', 0)}")
                    if memory_summary.get('total_interactions', 0) > 0:
                        print(f"   ‚Ä¢ Confian√ßa m√©dia: {memory_summary.get('average_confidence', 0):.2f}")
                        print(f"   ‚Ä¢ Confian√ßa m√≠nima: {memory_summary.get('min_confidence', 0):.2f}")
                        print(f"   ‚Ä¢ Confian√ßa m√°xima: {memory_summary.get('max_confidence', 0):.2f}")
                    continue
                
                elif user_input.lower() == 'limpar':
                    agent.clear_memory()
                    continue
                
                elif user_input.lower() == 'exportar':
                    success = agent.export_memory("memoria_agente.json")
                    if success:
                        print("‚úÖ Mem√≥ria exportada para 'memoria_agente.json'")
                    else:
                        print("‚ùå Erro ao exportar mem√≥ria")
                    continue
                
                # Processar pergunta normal
                result = agent.process_user_input(user_input)
                
                print(f"\nüìã Resultado:")
                print(f"   ‚Ä¢ Tipo de decis√£o: {result['decision_type']}")
                print(f"   ‚Ä¢ Confian√ßa: {result['confidence']:.2f}")
                print(f"   ‚Ä¢ Qualidade: {result['quality_metrics']['overall_score']:.2f}")
                
                if result.get('needs_human_help'):
                    print(f"\nü§î {result['response']}")
                else:
                    print(f"\nüí° An√°lise:")
                    print(f"{result['response']}")
                
                # Mostrar dados utilizados
                if result.get('data_used'):
                    print(f"\nüìä Dados utilizados:")
                    for data in result['data_used']:
                        print(f"   ‚Ä¢ {data}")
                
            except KeyboardInterrupt:
                print(f"\n\nüëã Encerrando agente...")
                break
            except Exception as e:
                print(f"‚ùå Erro: {e}")
                continue
        
        # Limpar recursos
        agent.close()
        
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 