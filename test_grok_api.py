#!/usr/bin/env python3
"""
Teste R√°pido da API Grok
"""

import requests
import json

# Configura√ß√µes da API
XAI_API_KEY = "xai-ALAspSpCmyKga42PSR4xQNmHjuj68ux2lDHUC8RS9SBPTNrTBe4ZSAZDE42PhI96tJqq7hjRstilmGWp"
XAI_API_URL = "https://api.x.ai/v1/chat/completions"

def test_grok_connection():
    """Testa a conex√£o b√°sica com a API Grok"""
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {XAI_API_KEY}"
    }
    
    # Teste simples
    test_messages = [
        {"role": "system", "content": "Voc√™ √© um assistente √∫til."},
        {"role": "user", "content": "Ol√°! Pode me dizer 'Ol√°, API Grok funcionando!' se estiver tudo ok?"}
    ]
    
    payload = {
        "messages": test_messages,
        "model": "grok-4",
        "stream": False
    }
    
    print("üîç Testando conex√£o com Grok API...")
    print(f"URL: {XAI_API_URL}")
    print(f"API Key: {XAI_API_KEY[:20]}...")
    print("-" * 50)
    
    try:
        response = requests.post(
            XAI_API_URL,
            headers=headers,
            json=payload,
            timeout=15
        )
        
        print(f"üì° Status Code: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            content = result.get("choices", [{}])[0].get("message", {}).get("content", "")
            print("‚úÖ Conex√£o estabelecida com sucesso!")
            print(f"ü§ñ Resposta do Grok: {content}")
            return True
        else:
            print(f"‚ùå Erro na API: {response.status_code}")
            print(f"Resposta: {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚è∞ Timeout - API n√£o respondeu em tempo h√°bil")
        return False
    except requests.exceptions.ConnectionError:
        print("üîå Erro de conex√£o - Verifique sua internet")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def test_grok_analysis():
    """Testa an√°lise de dados com Grok"""
    
    if not test_grok_connection():
        return
    
    print("\n" + "="*50)
    print("üß† Testando an√°lise de dados...")
    print("="*50)
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {XAI_API_KEY}"
    }
    
    # Dados de exemplo
    data_summary = """
    Dados de 200 cidades brasileiras:
    - S√£o Paulo: PIB R$ 500 bi, Popula√ß√£o 12M, Desemprego 8.2%
    - Rio de Janeiro: PIB R$ 300 bi, Popula√ß√£o 6.7M, Desemprego 9.1%
    - Belo Horizonte: PIB R$ 200 bi, Popula√ß√£o 2.5M, Desemprego 7.5%
    """
    
    system_prompt = """Voc√™ √© um especialista em an√°lise de dados brasileiro.
    Analise os dados fornecidos e responda de forma clara e objetiva.
    Use formata√ß√£o markdown quando apropriado."""
    
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": f"Analise estes dados e me diga: qual cidade tem o maior PIB e por que isso √© importante para neg√≥cios?\n\n{data_summary}"}
    ]
    
    payload = {
        "messages": messages,
        "model": "grok-4",
        "stream": False
    }
    
    try:
        response = requests.post(
            XAI_API_URL,
            headers=headers,
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            content = result.get("choices", [{}])[0].get("message", {}).get("content", "")
            print("‚úÖ An√°lise conclu√≠da!")
            print("\nüìä Resposta do Grok:")
            print("-" * 40)
            print(content)
            print("-" * 40)
        else:
            print(f"‚ùå Erro na an√°lise: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro na an√°lise: {e}")

if __name__ == "__main__":
    print("üöÄ TESTE R√ÅPIDO DA API GROK")
    print("=" * 50)
    
    # Teste b√°sico
    success = test_grok_connection()
    
    if success:
        # Teste de an√°lise
        test_grok_analysis()
    
    print("\n" + "="*50)
    print("üèÅ Teste conclu√≠do!")
    print("="*50) 